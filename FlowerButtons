/*
  Flowe Button, Proof of concept, áþ

 Turns light on and off a on button pressed
 Rotates flower type selection when button one is selected
 Increases pot size when button two is selected
 Decreases pot size when button three is selected
 * 10K resistor attached to pin 2 from groundl - button one
 * 10K resistor attached to pin 3 from groundl - butotn two
 * 10K resistor attached to pin 4 from groundl - button sthree
 pin 13 (on board led), when pressing a pushbutton attached to pin 2,3,and 4.

 The circuit:
 * LED attached from pin 13 to ground
 * pushbutton attached to pin 2, 3 and 4 from +5V

 */

// set pin numbers:
const int buttonPin2 = 2;    // the number of the pushbutton2 pin
const int buttonPin3 = 3;    // the number of the pushbutton3 pin
const int buttonPin4 = 4;    // the number of the pushbutton4 pin
const int ledPin =  13;      // the number of the LED pin

// variables will change:
int ledState = 0; 
int flowerType = 0;  //Or fetch this from memory
//int potLiters = 1;   //Initial potsize in Liters
static unsigned long last_action = millis();

//Zero based array for flowertypes
//Pot size, Humidity, Dry days
float plantArray[5][3]={
 {0.2,3,0.5}, 
 {0.5,2,1},
 {1,1,2},
 {2,3,5},
 {3,2,7}
};


//Value names
String valueNameArray[5][2]={
 {"Flower 1","???  "},  //0 
 {"Flower 2","Wet  "},  //1
 {"Flower 3","Moist"},  //2
 {"Flower 4","Dry  "},  //3
 {"Flower 5","???  "}   //4
};


void setup() {
  //start serial connection
  Serial.begin(9600);
  // Initial message to display
  printPlantArray();
  // initialize the LED pin as an output:
  pinMode(ledPin, OUTPUT);
  // initialize the pushbutton pin as an input:
  pinMode(buttonPin2, INPUT);
  pinMode(buttonPin3, INPUT);
  pinMode(buttonPin4, INPUT);
}

void printPlantArray() {
  //print out the value of the flowerType
    Serial.print(valueNameArray[flowerType][0]);
    //Serial.print(flowerType);
    Serial.print("   Pot size L:  ");
    Serial.print(plantArray[flowerType][0]);
    Serial.print("   Humidity:  ");
    Serial.print(valueNameArray[(int) plantArray[flowerType][1]][1]);
    //Serial.print(plantArray[flowerType][1]);
    Serial.print("   Dry days:  ");
    Serial.println(plantArray[flowerType][2]);
}

bool buttonTime(unsigned long last_test) {
  // Function to stall next button push until stalltime is reached
  return ( millis() > last_test + 200);
}

void ledChange(){
//  ledState = !ledState;
//  digitalWrite(ledPin, ledState);

    if (ledState == 1) {
    // turn LED off:
        ledState = 0;
        digitalWrite(ledPin, LOW);
    } else {
    // turn LED on:
        ledState = 1;
        digitalWrite(ledPin, HIGH);
    }
}

void flowerTypeChange(){
     // Increase flowerType selection
      if (flowerType < 4) {
        ++flowerType;
      } else {
        flowerType = 0;
      }
     printPlantArray();
}

void PotLiters(int buttonPin){
    // Increase or decrease potsize in Liters
      float potLiters = plantArray[flowerType][0];
    //set the pad size (lower for low numbers)
      float pad = 0.5;
      if ( potLiters < 2.5) {
        int p = 0.8+potLiters;
        pad = constrain((float) p/10,0.1,0.5);
      }       
      if (buttonPin == 3) {
        potLiters = potLiters + pad;
      } else if (buttonPin == 4) {
        potLiters = potLiters - pad;
      }
    // Uppdate array from 0.1 to 10 liters  
    plantArray[flowerType][0] = constrain(potLiters,0.1,10);
    // print out the value of the flowerType
    printPlantArray();
}

//Bæti þessari við frá Erni
bool timeToAct(unsigned long last_action, unsigned long current_time, unsigned long interval) {
  // Function to calculate whether or not it is time to act based on state of
  // millisecond timers. We need this because millis() rolls over every ~50 days, and this
  // handles that safely.
  // If any time exceeding interval has passed between last_action and current_time, this function
  // will return true
  return (current_time - last_action >= interval);
}

void loop() {
  // Initialize the variables we need
  static unsigned long factor = 1000;
  static unsigned long watering_interval = plantArray[flowerType][2] *factor; //Dry Days * 1000 for testing
  static unsigned long last_watering = 0 - watering_interval;
  static unsigned long watering_amount = plantArray[flowerType][0] *factor; // Pot size L * 1000 for testing
  


// Do some work
if (ledState == 0) {
  // If light (pumping) is off
  if (timeToAct(last_watering, millis(), watering_interval)) {
    Serial.print("Start pumping, Watering interval: ");
    Serial.println(watering_interval);
    ledChange();
    last_watering =  millis();
  }
   
}

if (ledState == 1) {
  // If light (pumping) is on
  if (timeToAct(last_watering, millis(), watering_amount)) {
    // if water amount is reacht
    Serial.print("Stop  pumping, Water amount: ");
    Serial.println(watering_amount);
    ledChange();
    last_watering =  millis();
  }
}

// Brlow is only for buttons
if (buttonTime(last_action)){
   // check if the pushbutton is pressed.
   if (digitalRead(buttonPin2) == HIGH) {
    //Flower Type button pressed
      flowerTypeChange();
      last_action = millis();
      }
   if (digitalRead(buttonPin3) == HIGH) {
    // increase button pressed
      PotLiters(buttonPin3);
      last_action = millis();
      }
   if (digitalRead(buttonPin4) == HIGH) {
    //Decrease button pressed
      PotLiters(buttonPin4);
      last_action = millis();
      }
    watering_interval = plantArray[flowerType][2] *factor;
    watering_amount = plantArray[flowerType][0] *factor;
   }
}
